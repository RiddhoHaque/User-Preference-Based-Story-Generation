# -*- coding: utf-8 -*-
"""User Preference Based Story Generation-Dataset Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17K1B3gR410KIB-iFPlUvzddLpCKWpASc
"""
from transformers import pipeline

def get_number_of_words(text):
    if len(text) == 0:
        return 0
    word_count = 1
    for character in text:
        if character == ' ':
            word_count += 1
    return word_count

def get_genre(counter):
    genres = ['superhero', 'action', 'drama', 'horror', 'thriller', 'sci_fi']
    #print('Please enter your preferred genre from the following options')
    #for i in range(len(genres)):
    #    print('For', genres[i], 'press', str(i))
    return genres[counter]

def truncate_text(text):
    while len(text) > 0 and text[len(text) - 1] != '.':
        text = text[:-1]
    return text

def has_multiple_sentences(text):
    idx = 0
    for character in text:
        if character == '.' and idx >= 10:
            return True
        idx += 1
    return False

def get_truncated_context(prompt_string):
    word_count = get_number_of_words(prompt_string)
    if word_count <= 100:
        return prompt_string
    excess_spaces = word_count - 100
    closing_tag_count = 0
    space_count = 0
    context = ''

    for character in prompt_string:
        if closing_tag_count < 2:
            context += character
        if character == '>':
            closing_tag_count += 1

        if closing_tag_count >= 2:
            if character == ' ':
                space_count += 1

            if space_count >= excess_spaces:
                context += character

    return context

def generate_span(prompt_string, story_gen, iter_limit = False, min_new_words=50, max_new_words=100):
    previous_word_count = get_number_of_words(prompt_string)
    text = ''
    current_word_count = previous_word_count
    iter_count =0
    while len(text) == 0 or text[len(text) - 1] != '.' or current_word_count - previous_word_count < min_new_words :
        context = get_truncated_context(prompt_string)
        text_dict = story_gen(context)
        text = text_dict[0]['generated_text']

        current_word_count = get_number_of_words(text)
        if current_word_count - previous_word_count > max_new_words:
            text = truncate_text(text)
        prompt_string = text
        iter_count +=1
        if iter_limit and iter_count >5:
            break
    return prompt_string

def get_user_response(first_time):
    if first_time:
        return True
    return False

def get_extra_part(str1, str2):
    extra_portion = ''
    begin = len(str1)
    for idx in range(begin, len(str2)):
        extra_portion += str2[idx]
    return extra_portion

def solicit_user_response(options, passages):
    for _ in range(len(options)):
        print('Option', str(_+1), ':', options[_])

    input_str = input('Which of the above directions would you like the story to progress towards? [1/2/3/4]')
    input_val = int(input_str)
    return passages[input_val-1]

def copy_prompt_string(prompt_string):
    copy_string = ''
    idx=0
    for char in prompt_string:
        if idx ==1:
            copy_string = copy_string + 'S'
        else:
            copy_string = copy_string + char
        idx+=1
    return copy_string

def generate_story(story_gen, summarizer, counter):
    genre = get_genre(counter%6)
    prompt_string = "<BOS> <" + genre + ">"
    continue_story = True
    prompt_string = generate_span(prompt_string, story_gen, True)
    extra_string = ''
    first_time = True
    data_tuple = dict()
    data_tuple['genre'] = genre
    while continue_story:
        continue_story = get_user_response(first_time)
        hold_string = ''
        if first_time:
            hold_string = copy_prompt_string(prompt_string)
            data_tuple['Context'] = hold_string + '<EOS>'
            #print('data_tuple[Context]=', data_tuple['Context'])
            first_time = False


        if continue_story:
            prompt_addition = ['yaay yaay yaay', 'sad sad sad', 'murder murder murder', 'angry angry angry']
            for _ in range(2):
                story_gen.max_length = 60
                passage = generate_span(prompt_string + prompt_addition[_], story_gen, True)
                extra_string = get_extra_part(prompt_string+prompt_addition[_], passage)
                summarized = summarizer(extra_string, min_length=15, max_length=25)
                summary_text = summarized[0]['summary_text']
                if has_multiple_sentences(summary_text):
                    summary_text = truncate_text(summary_text)
                data_tuple['Option'+str(_)] = '<SOS>' + summary_text + '<EOS>'
                #print('data_tuple[Option'+str(_)+']=', data_tuple['Option'+str(_)])
                data_tuple['Prompt'+str(_)] = hold_string + '<cls>' + summary_text + '<EOS>'
                data_tuple['Passage'+str(_)] = '<SOS>' +  extra_string + '<EOS>'
                #print('data_tuple[Prompt'+str(_)+']=', data_tuple['Prompt'+str(_)])
                #print('data_tuple[Passage'+str(_)+']=', data_tuple['Passage'+str(_)])
    return data_tuple

import pandas as pd
def main():
    your_name = 'Riddho10'
    story_gen = pipeline("text-generation", "pranavpsv/gpt2-genre-story-generator", max_length=30)

    summarizer = pipeline("summarization", "sshleifer/distilbart-cnn-12-6")
    data_tuple_list = []
    fileNo = 0
    for count in range(1000):
        data_tuple_list.append(generate_story(story_gen, summarizer, count))
        if len(data_tuple_list) == 50:
            dataframe = pd.DataFrame(data_tuple_list)
            dataframe.to_csv(your_name + 'data' + str(fileNo)+ '.csv')
            fileNo += 1
            data_tuple_list = []

if __name__ == '__main__':
    main()